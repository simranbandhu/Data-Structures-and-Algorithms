#include <iostream>
#include <queue>
using namespace std;

class node{
    public:
    int data;
    node* left;
    node* right;
    
    node(int d){
        this->data = d;
        this->left = NULL;
        this->right = NULL;
    }
};

node* buildtree(node* root){
    cout<<"enter the data"<<endl;
    int data;
    cin>>data;

    root = new node(data);
    
    if(data == -1){
        return NULL;
    }
    
    cout<<"enter data for left node"<<endl;
    root->left = buildtree(root->left);
    
    cout<<"enter the data for right node"<<endl;
    root->right = buildtree(root->right);
    
    return root;
    
}


void levelordertrav(node * root){
    queue<node*> q;
    q.push(root);
    q.push(NULL);
    
    while(!q.empty()){
        node* temp = q.front();
        q.pop();
        
        if(temp == NULL){
            cout<<endl;
            
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
            cout<<temp->data<<" ";
            if(temp->left){
                q.push(temp->left);
            }
            
            if(temp->right){
                q.push(temp->right);
            }    
        }
    }
    
}

void buildfromlevelorder(node* &root){
    queue<node*>q;
    cout<<"enter data"<<endl;
    int data;
    cin>>data;
    
    root = new node(data);
    q.push(root);
    
    while(!q.empty()){
        node* temp = q.front();
        q.pop();
        
        int leftdata;
        cout<<"enter data for "<<temp->data<<"of left node"<<endl;
        cin>>leftdata;
        
        if(leftdata != -1){
            temp->left = new node(leftdata);
            q.push(temp->left);
        }
        
        int rightdata;
        cout<<"enter data for "<<temp->data<<"of right node"<<endl;
        cin>>rightdata;
        
        if(rightdata != -1){
            temp->right = new node(rightdata);
            q.push(temp->right);
        }
    }
    
}

// 1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1 

int main()
{
    node* root = NULL;
    
    buildfromlevelorder(root);
    
    levelordertrav(root);
    

    return 0;
}
